STEP 1: VIRTUALBOX

-install virtualbox
-download linux distro, (I'm using lubuntu 16.04 for this project)
-make new virtual machine and give it a 8GB virtual disk in your goinfre folder
-set network adapter to bridged from settings

STEP 2: INSTALL LINUX

-start your new virtual machine
-choose the disk image of your linux distro
-from boot menu choose to install
-follow instruction until you get to disk partioning part
	*choose manual partioning
	*create a ~300MB logical partition for /boot with boot flag
	*create a ~1024MB primary partition and slect swap area
	*create a ~4.2GB primary partition for / a.k.a root
	*rest of the memory you can give to primary /home
-finish the installation

STEP 3: SUDO USER

-if you didn't make user in installation, and you're on the root user, you can create a new user with following command:
	adduser <newuser>
	<new password>
	<new password again>
-if you want to fill rest information that's up to you, but it's not mandatory
-for sudo rights run the following command
	usermod -aG sudo <newuser>
-now you can go to that user and complete the rest of the deployment with that user, with following command:
	su <newuser>
	<newusers password>

STEP 4: COUPLE INSTALLATIONS

-before we start installing other packages, let's update all current packages with following:
	sudo apt-get update
	sudo apt-get upgrade
-now that everything is up to date we can get additional softwares
-let's intstall some packages, some of these may already be installed
	sudo apt-get install vim ssh apache2 fail2ban -y

STEP 5: STATIC IP

-run the following command to get your primary network interface name and current ip
	ip a
-it's usually after number 2, since number 1 is mostlikely lo=loopback, so look for 2 which for me is enp0s3
-next we set the static ip and netmask /30
	sudo vim /etc/network/interfaces
- leave the lo configurations as they are, below them add the following lines
	
	# The primary network interface
	auto ens33
	iface ens33 inet static
        address 10.1x.y.z
		# where x is your cluster, y is number bigger than rows and <=255, z is available host on /30
        netmask 255.255.255.252
		# this is netmask for /30
        network 10.1.x.y.z - 1/2
		# this is otherwise same as address but last number is z - 1 if you address is first available host on that network.
		# if your address is second available host then it's z - 2
        broadcast 10.1x.y.z + 2/1
		# this one also is based on your chosen address and if your host ip is 1st then it's z + 2
		# and if it's the 2nd host, then it's + 1
        gateway 10.1x.254.254
		# our routers gateway, x is your cluster

-hit 'esc :x' and then 'enter' to save if you're using vim
-reset ur network with:
	sudo systemctl restart networking
-next edit /etc/hosts
-change the 127.0.1.1 to your new ip
-firts lines should look something like this:

	127.0.0.1		localhost
	10.1x.y.z		<ur hostname>

-then just reboot your system

	sudo systemctl reboot

PART 6 : SSH CONFIG

-change port to 49152-65535 (these are free to customize ports that aren't used by default by any service etc.)
-disable root login

	sudo vi /etc/ssh/sshd_config

-with vim you can press "esc" and type "/Port 22" hit enter to find correct line
-now change 22 to port of your choice
-with /PermitRootLogin you can find the correct line
-change "yes" to "no"
-save and exit, then restart ssh:

	sudo systemctl restart ssh

-now we make key-pair, so we don't need password login
-go to your MAC:s terminal and run command:

	ssh-keygen

-if you wan't to name your key to other than default remember to include path
-if you wan't to add passphrase you can do it here, it's kind of password for your pubkey
-after generating this key, you will copy it to your VM server with following command:

	ssh-copy-id <VM-username>@<VM-ip> -p <ur-ssh-port>
	for example mine was:
	ssh-copy-id kmoilane@10.13.200.233 -p 49999

-type "yes" and hit enter
-now type your VM users password and hit enter
-from now on you can connect to your vm with public key with following command

	ssh -p <ur-ssh-port> <VM-username>@<VM-ip>

-do that and check your /home/<VM-username>/.ssh/authorized_keys file, there should be one key now.

	vi /home/kmoilane/.ssh/authorized_keys

-no we can disable the password authentication since SSH access HAS TO be done with pub. keys

	sudo vim /etc/ssh/sshd_config

-find "#PasswordAuthentication yes" and change it to "PasswordAuthentication no", so basically you uncomment it and disable it
-save, exit and restart sshd

PART 7: FIREWALL CONFIG

-we are going to use ufw a.k.a uncomplicated firewall to setup our rules
-first we deny all incoming by default and allow outgoing

	sudo ufw default deny incoming
	sudo ufw default allow outgoing

-then we need to specify ports that we want incoming traffic as well

	sudo ufw allow 55155
	sudo ufw allow 80
	sudo ufw allow 443

-now to enable and reload ufw we use:
	
	sudo ufw enable
	sudo ufw reload

-that's all we need for firewall

PART 8: DOS PROTECTION / FAIL2BAN

-this was a bit tricky part, since I used lubuntu first but then switched to debian because lubuntu didn't work with these rules
-we are using fail2ban 
-first we protect our ssh:
	*we need to add following to a file /etc/fail2ban/jail.d/defaults-debian.local

		[sshd]
		enabled = true
		port	= 55155
		filter	= sshd
		logpath	= %(sshd_log)s
		maxretry = 5
		bantime = 300
		banaction = iptables-multiport

		[http-get-dos]
		enabled = true
		port	= http,https
		filter	= http-get-dos
		logpath	= /var/log/apache2/access.log
		maxretry = 50
		findtime = 120
		bantime =  60
		action	= iptables[name=HTTP, port=http, protocol=tcp]

	*next what we need to do is create filter for http-get-dos, so:

		sudo vi /etc/fail2ban/filter.d/http-get-dos.conf
		
	*in there u need to type following:

		[Definition]
		failregex = ^<HOST> -.*"(GET|POST).*
		ignoreregex =

	*after that we just need to retsart fail2ban

		sudo systemctl restart fail2ban

-to see that jails are enabled you can use following command:

	sudo fail2ban-client status


PART 9: PORTSENTRY TO PROTECT FROM PORT SCANS

-before enabling portsentry, lets configurate it first
-in /etc/defaults/portsentry file change following lines:

	TCP_MODE="tcp"
	UDP_MODE="udp"

-to look like

	TCP_MODE="atcp"
	UDP_MODE="audp"

-then in /etc/portsentry/portsentry.conf change following lines accordingly:

	BLOCK_UDP="0" > BLOCK_UDP="1"
	BLOCK_TCP="0" > BLOCK_TCP="1"

-comment all other lines that begin with: "KILL_ROUTE" but uncomment the following:

	KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"

-to verify that this is the casse use this:

	cat portsentry.conf | grep KILL_ROUTE | grep -v "#"

-now we can restart portsentry

	sudo systemctl restart portsentry

-to see the list of banned IP:s you can use this command and look the ones that has source IP:

	iptables -L -n -v | grep DROP

-after banning an IP it also might go to /etc/hosts.deny and it will block all connections from that IP

PART 10: STOP USELESS SERVICES

-to list all enabled services a.k.a services that run on boot use:

	systemctl list-unit-files --type=service --state=enabled

-if you didn't install desktop environment, web or print servers, you can disable the following:

	sudo systemctl disable console-setup.service
	sudo systemctl disable keyboard-setup.service

-rest of the services are used or are useful, to have things up to date and to get information that we want to see like logs

PART 11: UPDATE SCRIPT

-we have to update and upgrade our packages once a week at 04am and everytime we boot our VM
-we also have to collect these logs in /var/log/update
