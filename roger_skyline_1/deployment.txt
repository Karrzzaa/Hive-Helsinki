STEP 1: VIRTUALBOX

-install virtualbox
-download linux distro, (I'm using debian 10.2.0 for this project)
-make new virtual machine and give it a 8GB virtual disk in your goinfre folder
-set network adapter to bridged from settings

STEP 2: INSTALL LINUX

-start your new virtual machine
-choose the disk image of your linux distro
-from boot menu choose to install
-follow instruction until you get to disk partioning part
	*choose manual partioning
	*create a ~4.6GB primary partition for / a.k.a root
	*create a ~1024MB logical partition and slect swap area
	*rest of the memory you can give to logical /home
-finish the installation

STEP 3: SUDO USER

-for me sudo wasn't installed so install it first by logging to root and then install package

	su (after that type root's password when asked)
	apt-get install sudo 

-if you didn't make user in installation, and you're on the root user, you can create a new user with following command:

	adduser <newuser>
	<new password>
	<new password again>

-if you want to fill rest information that's up to you, but it's not mandatory
-for sudo rights run the following command

	sudo usermod -aG sudo <newuser>

-now you can go to that user and complete the rest of the deployment with that user, with following command:

	su <newuser>
	<newusers password>

STEP 4: COUPLE INSTALLATIONS

-before we start installing other packages, let's update all current packages with following:

	sudo apt-get update -y
	sudo apt-get upgrade -y

-now that everything is up to date we can get additional softwares
-let's intstall some packages, some of these may already be installed

	sudo apt-get install vim ssh apache2 fail2ban portsentry ufw mailutils postfix -y

STEP 5: STATIC IP

-run the following command to get your primary network interface name and current ip
	ip a
-it's usually after number 2, since number 1 is mostlikely lo=loopback, so look for 2 which for me is enp0s3
-next we set the static ip and netmask /30
	sudo vim /etc/network/interfaces
- leave the lo configurations as they are, below them add the following lines
	
	# The primary network interface
	auto ens33
	iface ens33 inet static
        address 10.13.13.13
        netmask 255.255.255.252
        network 10.13.13.12
        broadcast 10.13.13.15
        gateway 10.13.254.254

-hit 'esc :x' and then 'enter' to save if you're using vim
-reset ur network with:

	sudo systemctl restart networking

-next edit /etc/hosts
-change the 127.0.1.1 to your new ip
-firts lines should look something like this:

	127.0.0.1		localhost
	10.13.13.13		<ur hostname>

-then just restart your networking

	sudo systemctl restart networking

PART 6 : SSH CONFIG

-change port to 49152-65535 (these are free to customize ports that aren't used by default by any service etc.)
-disable root login

	sudo vi /etc/ssh/sshd_config

-with vim you can press "esc" and type "/Port 22" hit enter to find correct line
-now change 22 to port of your choice
-with /PermitRootLogin you can find the correct line
-change "yes" to "no"
-save and exit, then restart ssh:

	sudo systemctl restart ssh

-now we make key-pair, so we don't need password login
-go to your MAC:s terminal and run command:

	ssh-keygen

-if you wan't to name your key to other than default remember to include path
-if you wan't to add passphrase you can do it here, it's kind of password for your pubkey
-after generating this key, you will copy it to your VM server with following command:

	ssh-copy-id <VM-username>@<VM-ip> -p <ur-ssh-port>
	for example mine was:
	ssh-copy-id kmoilane@10.13.13.13 -p 55155

-type "yes" and hit enter
-now type your VM users password and hit enter
-from now on you can connect to your vm with public key with following command

	ssh -p <ur-ssh-port> <VM-username>@<VM-ip>

-do that and check your /home/<VM-username>/.ssh/authorized_keys file, there should be one key now.

	vi /home/kmoilane/.ssh/authorized_keys

-no we can disable the password authentication since SSH access HAS TO be done with pub. keys

	sudo vim /etc/ssh/sshd_config

-find "#PasswordAuthentication yes" and change it to "PasswordAuthentication no", so basically you uncomment it and disable it
-save, exit and restart sshd

PART 7: FIREWALL CONFIG

-we are going to use ufw a.k.a uncomplicated firewall to setup our rules
-first we deny all incoming by default and allow outgoing

	sudo ufw default deny incoming
	sudo ufw default allow outgoing

-then we need to specify ports that we want incoming traffic as well

	sudo ufw allow 55155
	sudo ufw allow 80
	sudo ufw allow 443

-now to enable and reload ufw we use:
	
	sudo ufw enable
	sudo ufw reload

-that's all we need for firewall

PART 8: DOS PROTECTION / FAIL2BAN

-this was a bit tricky part, since I used lubuntu first but then switched to debian because lubuntu didn't work with these rules
-we are using fail2ban 
-first we protect our ssh:
	*we need to add following to a file /etc/fail2ban/jail.d/defaults-debian.local

		[sshd]
		enabled = true
		port	= 55155
		filter	= sshd
		logpath	= %(sshd_log)s
		maxretry = 5
		bantime = 300
		banaction = iptables-multiport

		[portscan]
		enabled = true
		filter	= portscan
		logpath = /var/log/syslog
		bantime = 300
		findtime = 300
		maxretry = 1

		[http-get-dos]
		enabled = true
		port	= http,https
		filter	= http-get-dos
		logpath	= /var/log/apache2/access.log
		maxretry = 50
		findtime = 300
		bantime =  300
		action	= iptables[name=HTTP, port=http, protocol=tcp]

	*next what we need to do is create filter for http-get-dos, so:

		sudo vi /etc/fail2ban/filter.d/http-get-dos.conf
		
	*in there u need to type following:

		[Definition]
		failregex = ^<HOST> -.*"(GET|POST).*
		ignoreregex =

	*and for portscan we create 
	
		sudo vi /etc/fail2ban/filter.d/portscan.conf

		[Definition}
		failregex = UFW BLOCK.* SRC=<HOST>
		ignoreregex =

	*after that we just need to retsart fail2ban

		sudo systemctl restart fail2ban

-to see that jails are enabled you can use following command:

	sudo fail2ban-client status


PART 9: PORTSENTRY TO PROTECT FROM PORT SCANS

-before enabling portsentry, lets configurate it first
-in /etc/defaults/portsentry file change following lines:

	TCP_MODE="tcp"
	UDP_MODE="udp"

-to look like

	TCP_MODE="atcp"
	UDP_MODE="audp"

-then in /etc/portsentry/portsentry.conf change following lines accordingly:

	BLOCK_UDP="0" > BLOCK_UDP="1"
	BLOCK_TCP="0" > BLOCK_TCP="1"

-comment all other lines that begin with: "KILL_ROUTE" but uncomment the following:

	KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"

-to verify that this is the casse use this:

	cat portsentry.conf | grep KILL_ROUTE | grep -v "#"

-now we can restart portsentry

	sudo systemctl restart portsentry

-to see the list of banned IP:s you can use this command and look the ones that has source IP:

	iptables -L -n -v | grep DROP

-after banning an IP it also might go to /etc/hosts.deny and it will block all connections from that IP

PART 10: STOP USELESS SERVICES

-to list all enabled services a.k.a services that run on boot use:

	systemctl list-unit-files --type=service --state=enabled

-if you didn't install desktop environment, web or print servers, you can disable the following:

	sudo systemctl disable console-setup.service
	sudo systemctl disable keyboard-setup.service

-rest of the services are used or are useful, to have things up to date and to get information that we want to see like logs

PART 11: UPDATE SCRIPT

-we have to update and upgrade our packages once a week at 04am and everytime we boot our VM
-we also have to collect these logs in /var/log/update
-for this we just create script which redirects output to /var/log/update_script.log

	sudo apt-get update -y >> /var/log/update_script.log
	sudo apt-get upgrade -y >> /var/log/update_script.log

-then we need to modify /etc/crontab or crontab -e with following lines:

	@reboot		root	/scripts/update_script.sh
	0 4 * * 1	root	/scripts/update_script.sh

-that's it

PART 12: MONITOR /ETC/CRONTAB

-we need to make script that runs every midnight and sends email to root if /etc/crontab file is been modified
-I decided to monitor last modified timestamp of /etc/crontab
-to get timestamp into file which I can compare later I  use:
	
	sudo stat -c '%y' /etc/crontab > /scripts/monitor_files/old

-after that my script looks like this:

#!/bin/bash

sudo stat -c '%y' /etc/crontab > /scripts/monitor_files/new

if cmp -s /scripts/monitor_files/orig /scripts/monitor_files/new ; then
	rm -f /scripts/monitor_files/new
else
	echo "automatic message when /etc/crontab is modified" | mail -s "crontab modified" root
	cp -f /scripts/monitor_files/new /scripts/monitor_files/orig
	rm -f /scripts/monitor_files/new
fi

-basically we use cmp command to compare the old timestamp and the new one, and if it's different we send email and replace old with new 
 for the next execution of this script
-if the files are same we just delete the new one
-to make this cronjob every midnight modify /etc/crontab with following line:

	0 0 * * *	root	/scripts/monitor_cron.sh


PART 13: SSL

-run following commands to get ssl certificate and redirect from http to https:

	sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfs	igned.crt

	*common name is your ip !!

	echo 'SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
	SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
	SSLHonorCipherOrder On
	# Disable preloading HSTS for now.  You can use the commented out header line that includes
	# the "preload" directive if you understand the implications.
	# Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
	Header always set X-Frame-Options DENY
	Header always set X-Content-Type-Options nosniff
	# Requires Apache >= 2.4
	SSLCompression off
	SSLUseStapling on
	SSLStaplingCache "shmcb:logs/stapling-cache(150000)"
	# Requires Apache >= 2.4.11
	SSLSessionTickets Off' | sudo tee /etc/apache2/conf-available/ssl-params.conf

	sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak
	sudo sed -i 's/ServerAdmin webmaster@localhost/ServerAdmin kmoilane@student.hive.fi/g' /etc/apache2/sites-available/default-ssl.conf
	sudo sed -i	'4i\		ServerName 10.13.13.13' /etc/apache2/sites-available/default-ssl.conf
	sudo sed -i 's/\/etc\/ssl\/certs\/ssl-cert-snakeoil.pem/\/etc\/ssl\/certs\/apache-selfsigned.crt/g' /etc/apache2/sites-available/default	-ssl.conf
	sudo sed -i 's/SSLCertificateKeyFile \/etc\/ssl\/private\/ssl-cert-snakeoil.key/SSLCertificateKeyFile	\/etc\/ssl\/private\/apache-self	signed.key/g' /etc/apache2/sites-available/default-ssl.conf
	sudo sed -i '13i\\n\tRedirect permanent "\/" "https:\/\/10.13.13.13\/"' /etc/apache2/sites-available/000-default.conf
	sudo a2enmod ssl >> /dev/null
	sudo a2enmod headers >> /dev/null
	sudo a2ensite default-ssl >> /dev/null
	sudo a2enconf ssl-params >> /dev/null
	sudo apache2ctl configtest
	sudo systemctl restart apache2


